scalar JSONObject
scalar DateTime

# Information about a user
type UserAccount {
  # Username
  username: String!

  # Display name
  displayName: String

  # Avatar url
  avatar: String
}

# A collection of posts
type Channel {
  # Unique ID for this channel.
  id: ID!

  # Display name of this channel
  name: String!

  # Short description of the purpose of this channel
  description: String!

  # Color used when displaying the channel badge
  color: String!

  # If true, all users can see the content of this channel
  public: Boolean!

  # Optional delay period when posting to this channel, in seconds. Any post that is published
  # to this channel will be embargoed for this long. Defaults to site configuration value.
  postDelay: Int
}

input ChannelInput {
  name: String!
  description: String!
  color: String!
  public: Boolean
  postDelay: Int
}

enum PostStatus {
  DRAFT # Saved as draft
  PENDING # Waiting to publish
  PUBLISHED # Visible
  READ # Read by recipient (only for posts to individual users)
  DELETED # Deleted by author
}

input PostInput {
  title: String!
  body: String!
  license: String
}

type Post {
  id: Int!

  # Time this post was first composed
  createdAt: DateTime!

  # Later of (createdAt, updatedAt, or time of most recent reply)
  updatedAt: DateTime!

  # Time this post was updated
  editedAt: DateTime!

  # Posting time - when this post first became visible.
  postedAt: DateTime!

  # Author of the post
  authorId: String!
  author: UserAccount!

  # If present, indicates the author has licensed this post under the given license.
  license: String

  # Title of the post
  title: String!

  # Slug
  slug: String!

  # JSON-encoded rich text body
  body: JSONObject!

  # Post publications
  status: PostStatus!

  # List of hash tags
  tags: [String!]!

  #   // # ID of users mentioned in the body
  #   // mentions User[] @relation("mentions", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  # Number of times this post has been viewed.
  numViews: Int!

  # If this is a reply, then this is a reference to the immediate parent
  parent: Int

  # Channels this post was posted to.
  channels: [Channel!]

  # List of user ids for users who have replied to this post (denormalized).
  respondents: [String!]!

  # Lit of replies to this post
  replies: [Post!]!

  #   // Reactions to this post - likes, flags, up/down votes.
  #   reactions Reaction[]

  #   // Ids of users that are following (subscribed to) this post.
  #   // These users will get a notification when updates happen.
  #   // Author is automatically added to this list, but can unfollow manually.
  #   following Following[]

  #   // # Whether this post should always appear at the top of the list of posts.
  #   sticky Boolean @default(false)
  # }
}

input TopicFiltersInput {
  # Filter by channel
  channel: String
}

type Query {
  # Return a list of all channels visible to this user.
  channels: [Channel!]!

  # Return information about a user
  account(username: String!): UserAccount

  # Return list of top-level topics
  topics(filters: TopicFiltersInput): [Post!]!

  # Return a topic post and all replies to it
  thread(postId: Int!): Post
}

type Mutation {
  # Create a new channel
  createChannel(channel: ChannelInput!): Channel

  # Create a new channel
  modifyChannel(channelId: String!, channel: ChannelInput!): Channel

  # Create a new top-level post
  createTopic(channel: String!, post: PostInput): Post

  # Reply to a post
  createReply(parent: Int!, post: PostInput): Post

  # editPost
  # deletePost
  # retractPost
  # createMessage
}
